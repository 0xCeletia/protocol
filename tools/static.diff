diff --git a/contracts/p0/mixins/TradingLib.sol b/contracts/p0/mixins/TradingLib.sol
index dd4ceec3..ab236c3a 100644
--- a/contracts/p0/mixins/TradingLib.sol
+++ b/contracts/p0/mixins/TradingLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import "contracts/interfaces/IAsset.sol";
 import "contracts/interfaces/IAssetRegistry.sol";
@@ -28,7 +33,7 @@ library TradingLibP0 {
         IAsset sell,
         IAsset buy,
         uint192 sellAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         assert(sell.price().neq(FIX_ZERO) && buy.price().neq(FIX_ZERO));
         trade.sell = sell;
         trade.buy = buy;
@@ -77,7 +82,7 @@ library TradingLibP0 {
         IAsset buy,
         uint192 maxSellAmount,
         uint192 deficitAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         // Don't sell dust.
         if (maxSellAmount.lt(dustThreshold(sell))) return (false, trade);

@@ -102,7 +107,7 @@ library TradingLibP0 {
     /// @return sellAmount {sellTok} Surplus amount (whole tokens)
     /// @return buyAmount {buyTok} Deficit amount (whole tokens)
     function largestSurplusAndDeficit(bool useFallenTarget)
-        external
+        internal
         view
         returns (
             IAsset surplus,
diff --git a/contracts/p1/RToken.sol b/contracts/p1/RToken.sol
index 53f55eb5..f4086212 100644
--- a/contracts/p1/RToken.sol
+++ b/contracts/p1/RToken.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 // solhint-disable-next-line max-line-length
 import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
@@ -17,7 +22,7 @@ import "contracts/p1/mixins/RewardableLib.sol";
  */

 /// @custom:oz-upgrades-unsafe-allow external-library-linking
-contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, IRToken {
+contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, RewardableLibP1, IRToken {
     using SafeERC20Upgradeable for IERC20Upgradeable;

     /// Immutable: expected to be an IPFS link but could be anything
@@ -368,12 +373,6 @@ contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, IRToken {
         basketsNeeded = basketsNeeded_;
     }

-    /// Claim all rewards and sweep to BackingManager
-    /// @custom:interaction
-    function claimAndSweepRewards() external interaction {
-        RewardableLibP1.claimAndSweepRewards();
-    }
-
     /// @custom:governance
     function setIssuanceRate(uint192 val) external governance {
         emit IssuanceRateSet(issuanceRate, val);
diff --git a/contracts/p1/mixins/Component.sol b/contracts/p1/mixins/Component.sol
index b6415af1..8b002749 100644
--- a/contracts/p1/mixins/Component.sol
+++ b/contracts/p1/mixins/Component.sol
@@ -7,6 +7,12 @@ import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
 import "contracts/interfaces/IComponent.sol";
 import "contracts/interfaces/IMain.sol";

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
+
 /**
  * Abstract superclass for system contracts registered in Main
  */
@@ -15,7 +21,7 @@ abstract contract ComponentP1 is Initializable, ContextUpgradeable, UUPSUpgradea

     /// @custom:oz-upgrades-unsafe-allow constructor
     // solhint-disable-next-line no-empty-blocks
-    constructor() initializer {}
+    // constructor() initializer {}

     // Sets main for the component - Can only be called during initialization
     // solhint-disable-next-line func-name-mixedcase
diff --git a/contracts/p1/mixins/RewardableLib.sol b/contracts/p1/mixins/RewardableLib.sol
index da131dea..961e8c9a 100644
--- a/contracts/p1/mixins/RewardableLib.sol
+++ b/contracts/p1/mixins/RewardableLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
@@ -13,13 +18,10 @@ import "contracts/interfaces/IRewardable.sol";
  * @notice A library that allows a contract to claim rewards
  * @dev The caller must implement the IRewardable interface!
  */
-library RewardableLibP1 {
+abstract contract RewardableLibP1 is IRewardable {
     using AddressUpgradeable for address;
     using SafeERC20Upgradeable for IERC20Upgradeable;

-    /// Redefines event for when rewards are claimed, to be able to emit from library
-    event RewardsClaimed(address indexed erc20, uint256 indexed amount);
-
     struct Claim {
         IERC20 reward;
         address callTo;
diff --git a/contracts/p1/mixins/Trading.sol b/contracts/p1/mixins/Trading.sol
index 8d96627a..0a3746af 100644
--- a/contracts/p1/mixins/Trading.sol
+++ b/contracts/p1/mixins/Trading.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
@@ -13,7 +18,7 @@ import "contracts/p1/mixins/RewardableLib.sol";

 /// Abstract trading mixin for all Traders, to be paired with TradingLib
 /// @dev See docs/security for discussion of Multicall safety
-abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeable, ITrading {
+abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeable, RewardableLibP1, ITrading {
     using FixLib for uint192;
     using SafeERC20Upgradeable for IERC20Upgradeable;

@@ -53,14 +58,6 @@ abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeabl
         emit TradeSettled(trade.sell(), trade.buy(), soldAmt, boughtAmt);
     }

-    /// Claim all rewards and sweep to BackingManager
-    /// Collective Action
-    /// @custom:interaction CEI
-    function claimAndSweepRewards() external interaction {
-        // == Interaction ==
-        RewardableLibP1.claimAndSweepRewards();
-    }
-
     /// Try to initiate a trade with a trading partner provided by the broker
     /// @custom:interaction (only reads or writes `trades`, and is marked `nonReentrant`)
     function tryTrade(TradeRequest memory req) internal nonReentrant {
diff --git a/contracts/p1/mixins/TradingLib.sol b/contracts/p1/mixins/TradingLib.sol
index 0f21b8c7..a702f34d 100644
--- a/contracts/p1/mixins/TradingLib.sol
+++ b/contracts/p1/mixins/TradingLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import "contracts/interfaces/IAsset.sol";
 import "contracts/interfaces/IAssetRegistry.sol";
@@ -27,7 +32,7 @@ library TradingLibP1 {
         IAsset sell,
         IAsset buy,
         uint192 sellAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         trade.sell = sell;
         trade.buy = buy;

@@ -75,7 +80,7 @@ library TradingLibP1 {
         IAsset buy,
         uint192 maxSellAmount,
         uint192 deficitAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         // Don't sell dust.
         if (maxSellAmount.lt(dustThreshold(sell))) return (false, trade);

@@ -100,7 +105,7 @@ library TradingLibP1 {
     /// @return sellAmount {sellTok} Surplus amount (whole tokens)
     /// @return buyAmount {buyTok} Deficit amount (whole tokens)
     function largestSurplusAndDeficit(bool useFallenTarget)
-        public
+        internal
         view
         returns (
             IAsset surplus,
@@ -194,7 +199,7 @@ library TradingLibP1 {
     /// Prepare a trade with seized RSR to buy for missing collateral
     /// @return doTrade If the trade request should be performed
     /// @return req The prepared trade request
-    function rsrTrade() external returns (bool doTrade, TradeRequest memory req) {
+    function rsrTrade() internal returns (bool doTrade, TradeRequest memory req) {
         IERC20 rsr_ = rsr();
         IStRSR stRSR_ = stRSR();
         IAsset rsrAsset = assetRegistry().toAsset(rsr_);
@@ -225,7 +230,7 @@ library TradingLibP1 {
     /// @return doTrade If the trade request should be performed
     /// @return req The prepared trade request
     function nonRSRTrade(bool useFallenTarget)
-        external
+        internal
         view
         returns (bool doTrade, TradeRequest memory req)
     {
