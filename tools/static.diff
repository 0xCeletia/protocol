diff --git a/contracts/p1/RToken.sol b/contracts/p1/RToken.sol
index 53f55eb5..f4086212 100644
--- a/contracts/p1/RToken.sol
+++ b/contracts/p1/RToken.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 // solhint-disable-next-line max-line-length
 import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
@@ -17,7 +22,7 @@ import "contracts/p1/mixins/RewardableLib.sol";
  */

 /// @custom:oz-upgrades-unsafe-allow external-library-linking
-contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, IRToken {
+contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, RewardableLibP1, IRToken {
     using SafeERC20Upgradeable for IERC20Upgradeable;

     /// Immutable: expected to be an IPFS link but could be anything
@@ -368,12 +373,6 @@ contract RTokenP1 is ComponentP1, IRewardable, ERC20PermitUpgradeable, IRToken {
         basketsNeeded = basketsNeeded_;
     }

-    /// Claim all rewards and sweep to BackingManager
-    /// @custom:interaction
-    function claimAndSweepRewards() external interaction {
-        RewardableLibP1.claimAndSweepRewards();
-    }
-
     /// @custom:governance
     function setIssuanceRate(uint192 val) external governance {
         emit IssuanceRateSet(issuanceRate, val);
diff --git a/contracts/p1/mixins/RewardableLib.sol b/contracts/p1/mixins/RewardableLib.sol
index da131dea..961e8c9a 100644
--- a/contracts/p1/mixins/RewardableLib.sol
+++ b/contracts/p1/mixins/RewardableLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol";
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
@@ -13,13 +18,10 @@ import "contracts/interfaces/IRewardable.sol";
  * @notice A library that allows a contract to claim rewards
  * @dev The caller must implement the IRewardable interface!
  */
-library RewardableLibP1 {
+abstract contract RewardableLibP1 is IRewardable {
     using AddressUpgradeable for address;
     using SafeERC20Upgradeable for IERC20Upgradeable;

-    /// Redefines event for when rewards are claimed, to be able to emit from library
-    event RewardsClaimed(address indexed erc20, uint256 indexed amount);
-
     struct Claim {
         IERC20 reward;
         address callTo;
diff --git a/contracts/p1/mixins/Trading.sol b/contracts/p1/mixins/Trading.sol
index 8d96627a..0a3746af 100644
--- a/contracts/p1/mixins/Trading.sol
+++ b/contracts/p1/mixins/Trading.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
 import "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol";
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
@@ -13,7 +18,7 @@ import "contracts/p1/mixins/RewardableLib.sol";

 /// Abstract trading mixin for all Traders, to be paired with TradingLib
 /// @dev See docs/security for discussion of Multicall safety
-abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeable, ITrading {
+abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeable, RewardableLibP1, ITrading {
     using FixLib for uint192;
     using SafeERC20Upgradeable for IERC20Upgradeable;

@@ -53,14 +58,6 @@ abstract contract TradingP1 is Multicall, ComponentP1, ReentrancyGuardUpgradeabl
         emit TradeSettled(trade.sell(), trade.buy(), soldAmt, boughtAmt);
     }

-    /// Claim all rewards and sweep to BackingManager
-    /// Collective Action
-    /// @custom:interaction CEI
-    function claimAndSweepRewards() external interaction {
-        // == Interaction ==
-        RewardableLibP1.claimAndSweepRewards();
-    }
-
     /// Try to initiate a trade with a trading partner provided by the broker
     /// @custom:interaction (only reads or writes `trades`, and is marked `nonReentrant`)
     function tryTrade(TradeRequest memory req) internal nonReentrant {
diff --git a/contracts/p1/mixins/Component.sol b/contracts/p1/mixins/Component.sol
index b6415af1..8b002749 100644
--- a/contracts/p1/mixins/Component.sol
+++ b/contracts/p1/mixins/Component.sol
@@ -7,6 +7,12 @@ import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
 import "contracts/interfaces/IComponent.sol";
 import "contracts/interfaces/IMain.sol";

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
+
 /**
  * Abstract superclass for system contracts registered in Main
  */
@@ -15,7 +21,7 @@ abstract contract ComponentP1 is Initializable, ContextUpgradeable, UUPSUpgradea

     /// @custom:oz-upgrades-unsafe-allow constructor
     // solhint-disable-next-line no-empty-blocks
-    constructor() initializer {}
+    // constructor() initializer {}

     // Sets main for the component - Can only be called during initialization
     // solhint-disable-next-line func-name-mixedcase
diff --git a/contracts/p0/mixins/TradingLib.sol b/contracts/p0/mixins/TradingLib.sol
index dd4ceec3..ab236c3a 100644
--- a/contracts/p0/mixins/TradingLib.sol
+++ b/contracts/p0/mixins/TradingLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import "contracts/interfaces/IAsset.sol";
 import "contracts/interfaces/IAssetRegistry.sol";
@@ -28,7 +33,7 @@ library TradingLibP0 {
         IAsset sell,
         IAsset buy,
         uint192 sellAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         assert(sell.price().neq(FIX_ZERO) && buy.price().neq(FIX_ZERO));
         trade.sell = sell;
         trade.buy = buy;
@@ -77,7 +82,7 @@ library TradingLibP0 {
         IAsset buy,
         uint192 maxSellAmount,
         uint192 deficitAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         // Don't sell dust.
         if (maxSellAmount.lt(dustThreshold(sell))) return (false, trade);

@@ -102,7 +107,7 @@ library TradingLibP0 {
     /// @return sellAmount {sellTok} Surplus amount (whole tokens)
     /// @return buyAmount {buyTok} Deficit amount (whole tokens)
     function largestSurplusAndDeficit(bool useFallenTarget)
-        external
+        internal
         view
         returns (
             IAsset surplus,
diff --git a/contracts/p1/mixins/TradingLib.sol b/contracts/p1/mixins/TradingLib.sol
index 0f21b8c7..a702f34d 100644
--- a/contracts/p1/mixins/TradingLib.sol
+++ b/contracts/p1/mixins/TradingLib.sol
@@ -1,6 +1,11 @@
 // SPDX-License-Identifier: BlueOak-1.0.0
 pragma solidity 0.8.9;

+/* DO_NOT_COMMIT. DO NOT EDIT THIS FILE.
+ *
+ * This file has been patched for use with echidna-test. Any
+ * changes to this file will be discarded. Make changes to the original file
+ * instead; it can be found in the same directory. */
 import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import "contracts/interfaces/IAsset.sol";
 import "contracts/interfaces/IAssetRegistry.sol";
@@ -27,7 +32,7 @@ library TradingLibP1 {
         IAsset sell,
         IAsset buy,
         uint192 sellAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         trade.sell = sell;
         trade.buy = buy;

@@ -75,7 +80,7 @@ library TradingLibP1 {
         IAsset buy,
         uint192 maxSellAmount,
         uint192 deficitAmount
-    ) public view returns (bool notDust, TradeRequest memory trade) {
+    ) internal view returns (bool notDust, TradeRequest memory trade) {
         // Don't sell dust.
         if (maxSellAmount.lt(dustThreshold(sell))) return (false, trade);

@@ -100,7 +105,7 @@ library TradingLibP1 {
     /// @return sellAmount {sellTok} Surplus amount (whole tokens)
     /// @return buyAmount {buyTok} Deficit amount (whole tokens)
     function largestSurplusAndDeficit(bool useFallenTarget)
-        public
+        internal
         view
         returns (
             IAsset surplus,
@@ -194,7 +199,7 @@ library TradingLibP1 {
     /// Prepare a trade with seized RSR to buy for missing collateral
     /// @return doTrade If the trade request should be performed
     /// @return req The prepared trade request
-    function rsrTrade() external returns (bool doTrade, TradeRequest memory req) {
+    function rsrTrade() internal returns (bool doTrade, TradeRequest memory req) {
         IERC20 rsr_ = rsr();
         IStRSR stRSR_ = stRSR();
         IAsset rsrAsset = assetRegistry().toAsset(rsr_);
@@ -225,7 +230,7 @@ library TradingLibP1 {
     /// @return doTrade If the trade request should be performed
     /// @return req The prepared trade request
     function nonRSRTrade(bool useFallenTarget)
-        external
+        internal
         view
         returns (bool doTrade, TradeRequest memory req)
     {
diff --git a/test/Upgradeability.test.ts b/test/Upgradeability.test.ts
index a525adae..ffd632b7 100644
--- a/test/Upgradeability.test.ts
+++ b/test/Upgradeability.test.ts
@@ -25,7 +25,6 @@ import {
   MainP1V2,
   RevenueTraderP1,
   RevenueTraderP1V2,
-  RewardableLibP1,
   RTokenAsset,
   RTokenP1,
   RTokenP1V2,
@@ -40,7 +39,6 @@ import {
   TestIRevenueTrader,
   TestIRToken,
   TestIStRSR,
-  TradingLibP1,
 } from '../typechain'
 import { defaultFixture, IComponents, IConfig, Implementation, IMPLEMENTATION } from './fixtures'

@@ -74,8 +72,6 @@ describeP1(`Upgradeability - P${IMPLEMENTATION}`, () => {
   let distributor: TestIDistributor
   let rsrTrader: TestIRevenueTrader
   let rTokenTrader: TestIRevenueTrader
-  let tradingLib: TradingLibP1
-  let rewardableLib: RewardableLibP1

   // Factories
   let MainFactory: ContractFactory
@@ -123,26 +119,12 @@ describeP1(`Upgradeability - P${IMPLEMENTATION}`, () => {
       rTokenTrader,
     } = await loadFixture(defaultFixture))

-    // Deploy TradingLib external library
-    const TradingLibFactory: ContractFactory = await ethers.getContractFactory('TradingLibP1')
-    tradingLib = <TradingLibP1>await TradingLibFactory.deploy()
-
-    // Deploy RewardableLib external library
-    const RewardableLibFactory: ContractFactory = await ethers.getContractFactory('RewardableLibP1')
-    rewardableLib = <RewardableLibP1>await RewardableLibFactory.deploy()
-
     // Setup factories
     MainFactory = await ethers.getContractFactory('MainP1')
-    RTokenFactory = await ethers.getContractFactory('RTokenP1', {
-      libraries: { RewardableLibP1: rewardableLib.address },
-    })
+    RTokenFactory = await ethers.getContractFactory('RTokenP1')
     FurnaceFactory = await ethers.getContractFactory('FurnaceP1')
-    RevenueTraderFactory = await ethers.getContractFactory('RevenueTraderP1', {
-      libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address },
-    })
-    BackingManagerFactory = await ethers.getContractFactory('BackingManagerP1', {
-      libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address },
-    })
+    RevenueTraderFactory = await ethers.getContractFactory('RevenueTraderP1')
+    BackingManagerFactory = await ethers.getContractFactory('BackingManagerP1')
     AssetRegistryFactory = await ethers.getContractFactory('AssetRegistryP1')

     BasketHandlerFactory = await ethers.getContractFactory('BasketHandlerP1')
@@ -447,8 +429,7 @@ describeP1(`Upgradeability - P${IMPLEMENTATION}`, () => {
     it('Should upgrade correctly - BackingManager', async () => {
       // Upgrading
       const BackingMgrV2Factory: ContractFactory = await ethers.getContractFactory(
-        'BackingManagerP1V2',
-        { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
+        'BackingManagerP1V2'
       )
       const backingMgrV2: BackingManagerP1V2 = <BackingManagerP1V2>await upgrades.upgradeProxy(
         backingManager.address,
@@ -577,8 +558,7 @@ describeP1(`Upgradeability - P${IMPLEMENTATION}`, () => {
     it('Should upgrade correctly - RevenueTrader', async () => {
       // Upgrading
       const RevTraderV2Factory: ContractFactory = await ethers.getContractFactory(
-        'RevenueTraderP1V2',
-        { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
+        'RevenueTraderP1V2'
       )
       const rsrTraderV2: RevenueTraderP1V2 = <RevenueTraderP1V2>await upgrades.upgradeProxy(
         rsrTrader.address,
@@ -626,9 +606,8 @@ describeP1(`Upgradeability - P${IMPLEMENTATION}`, () => {

     it('Should upgrade correctly - RToken', async () => {
       // Upgrading
-      const RTokenV2Factory: ContractFactory = await ethers.getContractFactory('RTokenP1V2', {
-        libraries: { RewardableLibP1: rewardableLib.address },
-      })
+      const RTokenV2Factory: ContractFactory = await ethers.getContractFactory('RTokenP1V2')
+
       const rTokenV2: RTokenP1V2 = <RTokenP1V2>await upgrades.upgradeProxy(
         rToken.address,
         RTokenV2Factory,
diff --git a/test/fixtures.ts b/test/fixtures.ts
index f34e2b58..2d1197c5 100644
--- a/test/fixtures.ts
+++ b/test/fixtures.ts
@@ -31,7 +31,6 @@ import {
   IBasketHandler,
   MainP1,
   RevenueTraderP1,
-  RewardableLibP1,
   RTokenAsset,
   RTokenP1,
   StaticATokenMock,
@@ -46,8 +45,6 @@ import {
   TestIRevenueTrader,
   TestIRToken,
   TestIStRSR,
-  TradingLibP0,
-  TradingLibP1,
   USDCMock,
 } from '../typechain'

@@ -418,18 +415,12 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     minBidSize: fp('1'), // 1 UoA (USD)
   }

-  // Deploy TradingLib external library
-  const TradingLibFactory: ContractFactory = await ethers.getContractFactory('TradingLibP0')
-  const tradingLib: TradingLibP0 = <TradingLibP0>await TradingLibFactory.deploy()
-
   // Deploy Facade
   const FacadeFactory: ContractFactory = await ethers.getContractFactory('Facade')
   facade = <Facade>await FacadeFactory.deploy()

   // Create Deployer
-  const DeployerFactory: ContractFactory = await ethers.getContractFactory('DeployerP0', {
-    libraries: { TradingLibP0: tradingLib.address },
-  })
+  const DeployerFactory: ContractFactory = await ethers.getContractFactory('DeployerP0')
   let deployer: TestIDeployer = <DeployerP0>(
     await DeployerFactory.deploy(
       rsr.address,
@@ -445,20 +436,11 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const MainImplFactory: ContractFactory = await ethers.getContractFactory('MainP1')
     const mainImpl: MainP1 = <MainP1>await MainImplFactory.deploy()

-    // Deploy TradingLib external library
-    const TradingLibFactory: ContractFactory = await ethers.getContractFactory('TradingLibP1')
-    const tradingLib: TradingLibP1 = <TradingLibP1>await TradingLibFactory.deploy()
-
-    // Deploy RewardableLib external library
-    const RewardableLibFactory: ContractFactory = await ethers.getContractFactory('RewardableLibP1')
-    const rewardableLib: RewardableLibP1 = <RewardableLibP1>await RewardableLibFactory.deploy()
-
     const AssetRegImplFactory: ContractFactory = await ethers.getContractFactory('AssetRegistryP1')
     const assetRegImpl: AssetRegistryP1 = <AssetRegistryP1>await AssetRegImplFactory.deploy()

     const BackingMgrImplFactory: ContractFactory = await ethers.getContractFactory(
-      'BackingManagerP1',
-      { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
+      'BackingManagerP1'
     )
     const backingMgrImpl: BackingManagerP1 = <BackingManagerP1>await BackingMgrImplFactory.deploy()

@@ -470,10 +452,7 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const DistribImplFactory: ContractFactory = await ethers.getContractFactory('DistributorP1')
     const distribImpl: DistributorP1 = <DistributorP1>await DistribImplFactory.deploy()

-    const RevTraderImplFactory: ContractFactory = await ethers.getContractFactory(
-      'RevenueTraderP1',
-      { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
-    )
+    const RevTraderImplFactory: ContractFactory = await ethers.getContractFactory('RevenueTraderP1')
     const revTraderImpl: RevenueTraderP1 = <RevenueTraderP1>await RevTraderImplFactory.deploy()

     const FurnaceImplFactory: ContractFactory = await ethers.getContractFactory('FurnaceP1')
@@ -485,9 +464,7 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const BrokerImplFactory: ContractFactory = await ethers.getContractFactory('BrokerP1')
     const brokerImpl: BrokerP1 = <BrokerP1>await BrokerImplFactory.deploy()

-    const RTokenImplFactory: ContractFactory = await ethers.getContractFactory('RTokenP1', {
-      libraries: { RewardableLibP1: rewardableLib.address },
-    })
+    const RTokenImplFactory: ContractFactory = await ethers.getContractFactory('RTokenP1')
     const rTokenImpl: RTokenP1 = <RTokenP1>await RTokenImplFactory.deploy()

     const StRSRImplFactory: ContractFactory = await ethers.getContractFactory('StRSRP1Votes')
diff --git a/test/integration/fixtures.ts b/test/integration/fixtures.ts
index b79bf0e0..084bfe8d 100644
--- a/test/integration/fixtures.ts
+++ b/test/integration/fixtures.ts
@@ -26,7 +26,6 @@ import {
   IGnosis,
   MainP1,
   RevenueTraderP1,
-  RewardableLibP1,
   RTokenAsset,
   RTokenP1,
   StaticATokenLM,
@@ -41,8 +40,6 @@ import {
   TestIRevenueTrader,
   TestIRToken,
   TestIStRSR,
-  TradingLibP0,
-  TradingLibP1,
 } from '../../typechain'

 import {
@@ -355,18 +352,12 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     minBidSize: fp('0.001'), // 0.1% of the minBuyAmount
   }

-  // Deploy TradingLib external library
-  const TradingLibFactory: ContractFactory = await ethers.getContractFactory('TradingLibP0')
-  const tradingLib: TradingLibP0 = <TradingLibP0>await TradingLibFactory.deploy()
-
   // Deploy Facade
   const FacadeFactory: ContractFactory = await ethers.getContractFactory('Facade')
   facade = <Facade>await FacadeFactory.deploy()

   // Create Deployer
-  const DeployerFactory: ContractFactory = await ethers.getContractFactory('DeployerP0', {
-    libraries: { TradingLibP0: tradingLib.address },
-  })
+  const DeployerFactory: ContractFactory = await ethers.getContractFactory('DeployerP0')
   let deployer: TestIDeployer = <DeployerP0>(
     await DeployerFactory.deploy(
       rsr.address,
@@ -382,20 +373,11 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const MainImplFactory: ContractFactory = await ethers.getContractFactory('MainP1')
     const mainImpl: MainP1 = <MainP1>await MainImplFactory.deploy()

-    // Deploy TradingLib external library
-    const TradingLibFactory: ContractFactory = await ethers.getContractFactory('TradingLibP1')
-    const tradingLib: TradingLibP1 = <TradingLibP1>await TradingLibFactory.deploy()
-
-    // Deploy RewardableLib external library
-    const RewardableLibFactory: ContractFactory = await ethers.getContractFactory('RewardableLibP1')
-    const rewardableLib: RewardableLibP1 = <RewardableLibP1>await RewardableLibFactory.deploy()
-
     const AssetRegImplFactory: ContractFactory = await ethers.getContractFactory('AssetRegistryP1')
     const assetRegImpl: AssetRegistryP1 = <AssetRegistryP1>await AssetRegImplFactory.deploy()

     const BackingMgrImplFactory: ContractFactory = await ethers.getContractFactory(
-      'BackingManagerP1',
-      { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
+      'BackingManagerP1'
     )
     const backingMgrImpl: BackingManagerP1 = <BackingManagerP1>await BackingMgrImplFactory.deploy()

@@ -407,10 +389,7 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const DistribImplFactory: ContractFactory = await ethers.getContractFactory('DistributorP1')
     const distribImpl: DistributorP1 = <DistributorP1>await DistribImplFactory.deploy()

-    const RevTraderImplFactory: ContractFactory = await ethers.getContractFactory(
-      'RevenueTraderP1',
-      { libraries: { RewardableLibP1: rewardableLib.address, TradingLibP1: tradingLib.address } }
-    )
+    const RevTraderImplFactory: ContractFactory = await ethers.getContractFactory('RevenueTraderP1')
     const revTraderImpl: RevenueTraderP1 = <RevenueTraderP1>await RevTraderImplFactory.deploy()

     const FurnaceImplFactory: ContractFactory = await ethers.getContractFactory('FurnaceP1')
@@ -422,9 +401,7 @@ export const defaultFixture: Fixture<DefaultFixture> = async function ([
     const BrokerImplFactory: ContractFactory = await ethers.getContractFactory('BrokerP1')
     const brokerImpl: BrokerP1 = <BrokerP1>await BrokerImplFactory.deploy()

-    const RTokenImplFactory: ContractFactory = await ethers.getContractFactory('RTokenP1', {
-      libraries: { RewardableLibP1: rewardableLib.address },
-    })
+    const RTokenImplFactory: ContractFactory = await ethers.getContractFactory('RTokenP1')
     const rTokenImpl: RTokenP1 = <RTokenP1>await RTokenImplFactory.deploy()

     const StRSRImplFactory: ContractFactory = await ethers.getContractFactory('StRSRP1Votes')
